<Project ToolsVersion="15.0"
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <RepoRoot>$(MSBuildThisFileDirectory)</RepoRoot>
    <RepoEngPath>$(MSBuildThisFileDirectory)eng</RepoEngPath>
    <RepoSrcPath>$(RepoRoot)src</RepoSrcPath>
  </PropertyGroup>

  <!-- Setup default project properties -->
  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
    <Platform Condition="'$(Platform)' == ''">AnyCPU</Platform>
    <PlatformName Condition="'$(PlatformName)' == ''">$(Platform)</PlatformName>
  </PropertyGroup>


  <!-- Setup default project properties -->
  <PropertyGroup>
    <LangVersion>latest</LangVersion>
    <!--
      Disable NU5105 NuGet Pack warning that the version is SemVer 2.0.
      SemVer 2.0 is supported by NuGet since 3.0.0 (July 2015) in some capacity, and fully since 3.5.0 (October 2016).
    -->
    <NoWarn>$(NoWarn);NU5105</NoWarn>
    <!--
      Disable some FxCop rules
     -->
    <NoWarn>
      $(NoWarn);
      CA1716;                   <!-- avoid using method names that are reserved in other languages -->
      CA1308;                   <!-- prefer ToUpperInvariant  -->
      CA1819;                   <!-- Properties should not return arrays -->
      CA1710;                   <!-- Use Collection sufix -->
      CA1028;                   <!-- Enum backing type should be int -->
      CA1032;                   <!-- Add default exception ctors -->
      CA1063;                   <!-- Dispose implementation -->
      CA1066;                   <!-- Implement IEquatable -->
      CA1815;                   <!-- Equality members on structs -->
      CA2007;                   <!-- Do not directly await a Task without calling ConfigureAwait (replaced by AZC0012) -->
      CA2231;                   <!-- Override Equality operators -->
      CA2225;                   <!-- Provide alternative to implicit operators -->
      CA1714;                   <!-- Flags should have plural names -->
      CA1062;                   <!-- Public parameter should be checked for null -->
      CA1031;                   <!-- Don't catch generic exceptions -->
      CA2000;                   <!-- Call dispose on IDisposable objects -->
      CA2012;                   <!-- ValueTask should only be awaited once - conflicts with EnsureCompleted check -->
    </NoWarn>

    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>symbols.nupkg</SymbolPackageFormat>
    <!-- Avoid implicitly added preview feeds -->
    <AddDotnetfeedProjectSource>false</AddDotnetfeedProjectSource>
  </PropertyGroup>

  <!-- Assembly properties for all projects -->
  <PropertyGroup>
    <Company>Microsoft Corporation</Company>
    <Copyright>Â© Microsoft Corporation. All rights reserved.</Copyright>
    <Authors>Microsoft</Authors>
    <Product>Microsoft Commercial Marketplace API client</Product>
    <PackageIcon>pkgicon.png</PackageIcon>
    <PackageIconPath>$(RepoEngPath)/images/$(PackageIcon)</PackageIconPath>
    <RepositoryUrl>https://github.com/Azure/commercial-marketplace-client-dotnet</RepositoryUrl>
    <PackageProjectUrl>$(RepositoryUrl)</PackageProjectUrl>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <NeutralLanguage>en-US</NeutralLanguage>
  </PropertyGroup>

  <PropertyGroup>
    <IsClientLibrary Condition="'$(IsClientLibrary)' == '' and $(MSBuildProjectName) == 'Microsoft.Marketplace'">true</IsClientLibrary>
    <IsTestProject Condition="$(MSBuildProjectName.EndsWith('.Tests'))">true</IsTestProject>
    <IsSamplesProject Condition="$(MSBuildProjectName.EndsWith('.Samples'))">true</IsSamplesProject>
    <IsTestSupportProject Condition="'$(IsTestProject)' != 'true' and ($(MSBuildProjectDirectory.Contains('/tests/')) or $(MSBuildProjectDirectory.Contains('\tests\')))">true</IsTestSupportProject>
    <IsShippingLibrary Condition="'$(IsClientLibrary)' == 'true' and '$(IsTestProject)' != 'true' and '$(IsTestSupportProject)' != 'true' and '$(IsSamplesProject)' != 'true'">true</IsShippingLibrary>

    <EnableClientSdkAnalyzers Condition="'$(IsShippingLibrary)' == 'true'">true</EnableClientSdkAnalyzers>
    <EnableFxCopAnalyzers Condition="'$(IsShippingLibrary)' == 'true'">true</EnableFxCopAnalyzers>
    <EnableStyleCopAnalyzers Condition="'$(EnableStyleCopAnalyzers)' == '' and '$(IsClientLibrary)' == 'true'">true</EnableStyleCopAnalyzers>
    <GenerateAPIListing Condition="'$(IsShippingLibrary)' == 'true'">true</GenerateAPIListing>
    <UpdateSourceOnBuild Condition="'$(UpdateSourceOnBuild)' == ''">$(AZURE_DEV_UPDATESOURCESONBUILD)</UpdateSourceOnBuild>
    <InheritDocEnabled>true</InheritDocEnabled>
    <InheritDocTrimLevel>private</InheritDocTrimLevel>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsShippingLibrary)' == 'true' and '$(TF_BUILD)' == 'true'">
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
  </PropertyGroup>

  <!-- TODO. REVIEW -->
  <PropertyGroup Condition="'$(IsMgmtClientLibrary)' == 'true'">
    <NoWarn>
      $(NoWarn);
      CA1812;                    <!-- Avoid uninstantiated internal classes. (Result from below including the Azure.Core source) -->
      AZC0012;                   <!-- Single word class names -->
      AZC0008;
    </NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(InheritDocEnabled)' != 'false' and '$(TargetFramework)'=='netstandard2.0'">
    <NoWarn>
      $(NoWarn);IDT001                  <!-- InheritDoc related to malformed XML in netstandard.xml -->
    </NoWarn>
  </PropertyGroup>

  <!-- CodeAnalysis RuleSet -->
  <PropertyGroup Condition="'$(IsClientLibrary)' == 'true'">
    <CodeAnalysisRuleSet>$(RepoEngPath)\CodeAnalysis.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>

  <!-- TargetFramework default properties -->
  <PropertyGroup>
    <RequiredTargetFrameworks>net47;netstandard2.0;netcoreapp3.1</RequiredTargetFrameworks>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsTestProject)' == 'true' or '$(IsTestSupportProject)' == 'true' or '$(IsSamplesProject)' == 'true'">
    <IsPackable>false</IsPackable>
    <RequiredTargetFrameworks>net47</RequiredTargetFrameworks>
    <RequiredTargetFrameworks Condition="'$(OS)' == 'Windows_NT'">net47</RequiredTargetFrameworks>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFrameworks>$(RequiredTargetFrameworks)</TargetFrameworks>

    <IsTargetingNetFx Condition="$(TargetFramework.StartsWith('net4'))">true</IsTargetingNetFx>
    <IsTargetingNetStandard Condition="$(TargetFramework.StartsWith('netstandard'))">true</IsTargetingNetStandard>
    <IsTargetingNetCoreApp Condition="$(TargetFramework.StartsWith('netcoreapp'))">true</IsTargetingNetCoreApp>

    <DefineConstants Condition="'$(IsTargetingNetFx)' == 'true'">$(DefineConstants);FullNetFx</DefineConstants>
  </PropertyGroup>

  <!-- Setup common output paths -->
  <PropertyGroup>
    <ArtifactsDir Condition="'$(ArtifactsDir)' == ''">$(RepoRoot)artifacts\</ArtifactsDir>
    <ArtifactsObjDir>$(ArtifactsDir)obj\</ArtifactsObjDir>
    <ArtifactsBinDir>$(ArtifactsDir)bin\</ArtifactsBinDir>
    <ArtifactsPackagesDir>$(ArtifactsDir)packages\$(Configuration)\</ArtifactsPackagesDir>
    <OutDirName Condition="'$(OutDirName)' == ''">$(MSBuildProjectName)</OutDirName>

    <BaseOutputPath Condition="'$(BaseOutputPath)' == ''">$([System.IO.Path]::GetFullPath('$(ArtifactsBinDir)$(OutDirName)\'))</BaseOutputPath>
    <OutputPath Condition="'$(PlatformName)' == 'AnyCPU'">$(BaseOutputPath)$(Configuration)\</OutputPath>
    <OutputPath Condition="'$(PlatformName)' != 'AnyCPU'">$(BaseOutputPath)$(PlatformName)\$(Configuration)\</OutputPath>

    <BaseIntermediateOutputPath Condition="'$(BaseIntermediateOutputPath)' == ''">$([System.IO.Path]::GetFullPath('$(ArtifactsObjDir)$(OutDirName)\'))</BaseIntermediateOutputPath>
    <IntermediateOutputPath Condition="'$(PlatformName)' == 'AnyCPU'">$(BaseIntermediateOutputPath)$(Configuration)\</IntermediateOutputPath>
    <IntermediateOutputPath Condition="'$(PlatformName)' != 'AnyCPU'">$(BaseIntermediateOutputPath)$(PlatformName)\$(Configuration)\</IntermediateOutputPath>

    <PackageOutputPath>$(ArtifactsPackagesDir)</PackageOutputPath>

    <CodeAnalysisRuleSet>$(RepoEngPath)\CodeAnalysis.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>

  <!-- StyleCop -->
  <ItemGroup>
    <PackageReference Include="StyleCop.Analyzers" Version="1.2.0-beta.312" Condition="'$(IncludeStyleCopAnalyzers)' == 'true'">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <AdditionalFiles Include="$(RepoEngPath)\stylecop.json">
      <Visible>false</Visible>
    </AdditionalFiles>
  </ItemGroup>

  <!-- Test project settings -->
  <ItemGroup Condition="'$(IsTestProject)' == 'true'">
    <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
      <_Parameter1>SourcePath</_Parameter1>
      <_Parameter2>$(MSBuildProjectDirectory)</_Parameter2>
    </AssemblyAttribute>
  </ItemGroup>

  <!-- Add Client SDK Tools -->

  <!-- Packages for client projects     -->
  <ItemGroup Condition="$(MSBuildProjectName.EndsWith('.Metering')) Or $(MSBuildProjectName.EndsWith('.SaaS')) Or $(MSBuildProjectName.EndsWith('.Marketplace'))">
    <PackageReference Include="Azure.Identity" Version="1.3.0"/>
    <PackageReference Include="System.Text.Json" Version="4.6.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="3.8.0" />
    <PackageReference Include="AutoRest.CSharp.V3" Version="1.0.0-alpha.20201215.7" />
        <PackageReference Include="Azure.Core" Version="1.7.0"/>
  </ItemGroup>

  <!-- Packages for test projects -->
  <ItemGroup Condition="$(MSBuildProjectName.EndsWith('.Tests'))">
    <PackageReference Include="Azure.Identity" Version="1.3.0" Aliases="AzureIdentity"/>
    <PackageReference Include="Azure.Core" Version="1.7.0" Aliases="AzureCore"/>

    <PackageReference Include="Microsoft.Extensions.Configuration.EnvironmentVariables" Version="5.0.0"/>
    <PackageReference Include="Microsoft.Extensions.Configuration.UserSecrets" Version="5.0.0"/>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="16.8.3"/>
    <PackageReference Include="Microsoft.Rest.ClientRuntime.Azure.TestFramework" Version="1.7.7" />
    <PackageReference Include="coverlet.collector" Version="1.3.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="System.Linq.Async" Version="5.0.0" />
  </ItemGroup>
</Project>
